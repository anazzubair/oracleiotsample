/*
 * Copyright (c) 2015, Oracle and/or its affiliates.  All rights reserved.
 *
 * This software is dual-licensed to you under the MIT License (MIT) and 
 * the Universal Permissive License (UPL).  See the LICENSE file in the root
 * directory for license terms.  You may choose either license, or both.
 */

def CLIENT_LIBRARY_SAMPLES_DIST = "${project.projectDir}/dist"
def JAVA_SE_VERSION = "1.5"

if (!project.hasProperty("CLIENT_LIBRARY_HOME")) {
    println "Does not have library home"
    ext.CLIENT_LIBRARY_HOME = "${project.projectDir}"
}
if (!project.hasProperty("CLIENT_LIBRARY_VERSION")) {
    ext.CLIENT_LIBRARY_VERSION = "dev"
}
def softwarePlatform = "javase-${JAVA_SE_VERSION}"

defaultTasks 'assembleAll'

task assembleAll
subprojects {

    apply plugin: 'java'

    sourceCompatibility = JAVA_SE_VERSION
    targetCompatibility = JAVA_SE_VERSION

    version = "${CLIENT_LIBRARY_VERSION}-javase"

    dependencies {
        compile fileTree("${CLIENT_LIBRARY_HOME}/lib")
    }

    afterEvaluate {
        def assembleTask = tasks.findByName('assemble')
        if (assembleTask != null) {
            assembleAll.dependsOn(assembleTask)
        }
    }

    jar {
        baseName = "oracle-iotcs-cl"
        appendix = "${softwarePlatform}-samples"
        version = "1.0.0"

        manifest {
             attributes("Implementation-Title" : 
                            "IoT Client Library Samples",
                        "Implementation-Version" : "${jar.version}")
        }
        def license = new File("${CLIENT_LIBRARY_HOME}/legal/LICENSE")
        if (license.exists()) {
            from license.getAbsolutePath()
        }
    }    
}

task cleanAll
subprojects {
    afterEvaluate {
        def cleanTask = tasks.findByName('clean')
        if (clean != null) {
            cleanAll.dependsOn(cleanTask)
        }
    }
}

task dist(type: Copy, dependsOn: assembleAll) {
    def jars = []
    subprojects.each {
        jars.add("${it.buildDir}/libs")
    }
    from(jars, {include "*.jar"})
    into "${CLIENT_LIBRARY_SAMPLES_DIST}"
}

task cleanDist(type: Delete) {
    delete 'dist'
}
cleanAll.dependsOn(cleanDist)
